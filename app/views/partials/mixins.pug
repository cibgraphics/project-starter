mixin state-dropdown()
  select
    option(value="AL") AL
    option(value="AK") AK
    option(value="AZ") AZ
    option(value="AR") AR
    option(value="CA") CA
    option(value="CO") CO
    option(value="CT") CT
    option(value="DE") DE
    option(value="DC") DC
    option(value="FL") FL
    option(value="GA") GA
    option(value="HI") HI
    option(value="ID") ID
    option(value="IL") IL
    option(value="IN") IN
    option(value="IA") IA
    option(value="KS") KS
    option(value="KY") KY
    option(value="LA") LA
    option(value="ME") ME
    option(value="MD") MD
    option(value="MA") MA
    option(value="MI") MI
    option(value="MN") MN
    option(value="MS") MS
    option(value="MO") MO
    option(value="MT") MT
    option(value="NE") NE
    option(value="NV") NV
    option(value="NH") NH
    option(value="NJ") NJ
    option(value="NM") NM
    option(value="NY") NY
    option(value="NC") NC
    option(value="ND") ND
    option(value="OH") OH
    option(value="OK") OK
    option(value="OR") OR
    option(value="PA") PA
    option(value="RI") RI
    option(value="SC") SC
    option(value="SD") SD
    option(value="TN") TN
    option(value="TX") TX
    option(value="UT") UT
    option(value="VT") VT
    option(value="VA") VA
    option(value="WA") WA
    option(value="WV") WV
    option(value="WI") WI
    option(value="WY") WY

mixin month-dropdown()
  select
    option(value="01") 1 - Jan
    option(value="02") 2 - Feb
    option(value="03") 3 - Mar
    option(value="04") 4 - Apr
    option(value="05") 5 - May
    option(value="06") 6 - Jun
    option(value="07") 7 - Jul
    option(value="08") 8 - Aug
    option(value="09") 9 - Sept
    option(value="10") 10 - Oct
    option(value="11") 11 - Nov
    option(value="12") 12 - Dec

mixin year-dropdown-up()
  select
    option(value="2019") 2019
    option(value="2019") 2020
    option(value="2019") 2021
    option(value="2019") 2022
    option(value="2019") 2023
    option(value="2019") 2024
    option(value="2019") 2025

mixin day-dropdown()
  select(name="day")
    each day in [...Array(31).keys()].map(d => d + 1)
      option(value=day)= day

mixin year-dropdown-down(start=2017, end=1900)
  select(name="year")
    each year in Array.from({length: start - end + 1}, (_, i) => start - i)
      option(value=year)= year


mixin county-dropdown()
  select
    option(value="United States") United States
    option(value="Canada") Cananda


mixin svg(id, classname)
  if classname
    svg(class=classname)
      use(xlink:href=id)
  else
    svg
      use(xlink:href=id)


mixin inputField(options)
  -
    const {
      id = '',
      label = '',
      placeholder = '',
      value = '',
      type = 'text',
      error = false,
      errorMessage = '',
      required = false,
      disabled = false,
      className = '',
      iconLeft = '',
      iconRight = '',
      showPasswordToggle = false
    } = options;

    const isPassword = type === 'password';
    const hasRightIcon = iconRight || (isPassword && showPasswordToggle);

  .input-wrapper(class=error ? 'has-error' : '')
    if label
      label(for=id)= label

    .input-container(class={ 'has-icon-left': iconLeft, 'has-icon-right': hasRightIcon })
      if iconLeft
        span.input-icon.left
          i(class=iconLeft)

      input(
        type=type,
        id=id,
        name=id,
        placeholder=placeholder,
        value=value,
        class=['input', className, error ? 'input-error' : ''].join(' '),
        required=required,
        disabled=disabled,
        data-password=isPassword && showPasswordToggle ? 'true' : null
      )

      if hasRightIcon
        span.input-icon.right
          if iconRight
            i(class=iconRight)
          else if isPassword && showPasswordToggle
            button(type='button', class='toggle-password', data-target=id) üëÅ

    if error && errorMessage
      p.error-message= errorMessage


mixin selectField(options)
  -
    const {
      id = '',
      label = '',
      value = '',
      optionsList = [],
      placeholder = 'Select an option',
      error = false,
      errorMessage = '',
      required = false,
      disabled = false,
      className = '',
      iconLeft = '',
      iconRight = ''
    } = options;

  .input-wrapper(class=error ? 'has-error' : '')
    if label
      label(for=id)= label

    .input-container(class={ 'has-icon-left': iconLeft, 'has-icon-right': iconRight })
      if iconLeft
        span.input-icon.left
          i(class=iconLeft)

      select(
        id=id,
        name=id,
        class=['input', className, error ? 'input-error' : ''].join(' '),
        required=required,
        disabled=disabled
      )
        option(disabled selected=value==='' value='')= placeholder
        each opt in optionsList
          option(value=opt.value selected=opt.value === value)= opt.label

      if iconRight
        span.input-icon.right
          i(class=iconRight)

    if error && errorMessage
      p.error-message= errorMessage


mixin radioGroupField(options)
  -
    const {
      id = '',
      label = '',
      name = id,
      selectedValue = '',
      optionsList = [],
      error = false,
      errorMessage = '',
      required = false,
      disabled = false,
    } = options;

  .input-wrapper(class=error ? 'has-error' : '')
    if label
      label.radio-group-label= label

    each opt, index in optionsList
      -
        const radioId = `${id}-${index}`;
      .radio
        input(
          type='radio',
          id=radioId,
          name=name,
          value=opt.value,
          checked=opt.value === selectedValue,
          required=required,
          disabled=disabled
        )
        label(for=radioId)
          .label-container= opt.label

    if error && errorMessage
      p.error-message= errorMessage



mixin toggleField(options)
  -
    const {
      id = '',
      name = id,
      label = '',
      checked = false,
      disabled = false,
      error = false,
      errorMessage = '',
      className = '',
      labelPosition = 'right' // or 'left'
    } = options;

  .input-wrapper(class=error ? 'has-error' : '')
    .toggle
      input(
        type='checkbox',
        id=id,
        name=name,
        checked=checked,
        disabled=disabled
      )
      label(for=id)
        if labelPosition === 'left'
          .toggle-text= label
          .toggle-display(class=className)

        if labelPosition === 'right'
          .toggle-display(class=className)
          .toggle-text= label

    if error && errorMessage
      p.error-message= errorMessage


mixin checkboxField(options)
  -
    const {
      id = '',
      name = id,
      label = '',
      checked = false,
      disabled = false,
      required = false,
      error = false,
      errorMessage = '',
      className = '',
      wrapperClass = 'input-wrapper'
    } = options;

  .input-wrapper(class=error ? 'has-error' : '')
    .checkbox
      input(
        type='checkbox',
        id=id,
        name=name,
        checked=checked,
        disabled=disabled,
        required=required
      )
      label(for=id)
        .label-container= label

    if error && errorMessage
      p.error-message= errorMessage
